[gd_resource type="ShaderMaterial" load_steps=11 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=2]

[sub_resource type="VisualShaderNodeTextureUniformTriplanar" id=3]
uniform_name = "TextureUniformTriplanar"
texture_type = 1

[sub_resource type="VisualShaderNodeColorConstant" id=4]
constant = Color( 0.0726662, 0.432617, 0.156327, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=5]
constant = Color( 1, 0.940881, 0.621641, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 20.0 ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=8]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=9]
output_port_for_preview = 0

[sub_resource type="VisualShader" id=10]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Color:24
	vec3 n_out24p0 = vec3(1.000000, 0.940881, 0.621641);
	float n_out24p1 = 1.000000;

// Color:23
	vec3 n_out23p0 = vec3(0.072666, 0.432617, 0.156327);
	float n_out23p1 = 1.000000;

// Input:10
	mat4 n_out10p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:11
	vec3 n_out11p0 = (n_out10p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorDecompose:6
	float n_out6p0 = n_out11p0.x;
	float n_out6p1 = n_out11p0.y;
	float n_out6p2 = n_out11p0.z;

// ScalarOp:26
	float n_in26p1 = 20.00000;
	float n_out26p0 = n_out6p1 / n_in26p1;

// VectorMix:7
	vec3 n_out7p0 = mix(n_out24p0, n_out23p0, vec3(n_out26p0));

// Output:0
	ALBEDO = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, -172 )
nodes/fragment/0/position = Vector2( 2100, -280 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( 500, 40 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( 1040, 0 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( 1760, -60 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 500, -40 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 700, 0 )
nodes/fragment/21/node = SubResource( 3 )
nodes/fragment/21/position = Vector2( 880, -560 )
nodes/fragment/23/node = SubResource( 4 )
nodes/fragment/23/position = Vector2( 1180, -180 )
nodes/fragment/24/node = SubResource( 5 )
nodes/fragment/24/position = Vector2( 1178.14, -280.75 )
nodes/fragment/26/node = SubResource( 6 )
nodes/fragment/26/position = Vector2( 1440, 60 )
nodes/fragment/connections = PoolIntArray( 3, 0, 11, 1, 10, 0, 11, 0, 7, 0, 0, 0, 11, 0, 6, 0, 6, 1, 26, 0, 26, 0, 7, 2, 23, 0, 7, 1, 24, 0, 7, 0 )

[resource]
shader = SubResource( 10 )
