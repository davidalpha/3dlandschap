[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[ext_resource path="res://depositphotos_29634327-seamless-grass-texture.jpeg" type="Texture" id=1]
[ext_resource path="res://depositphotos_118239344-Brown-rock-texture-closeup-of-pictures-in-a-geological-park..jpg" type="Texture" id=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=2]

[sub_resource type="VisualShaderNodeTextureUniformTriplanar" id=3]
output_port_for_preview = 0
uniform_name = "TextureUniformTriplanar2"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniformTriplanar" id=4]
uniform_name = "TextureUniformTriplanar"
texture_type = 1

[sub_resource type="VisualShaderNodeVectorFunc" id=5]
function = 1

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=7]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=8]
output_port_for_preview = 0

[sub_resource type="VisualShader" id=9]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D TextureUniformTriplanar : hint_albedo;
uniform sampler2D TextureUniformTriplanar2 : hint_albedo;


// TRIPLANAR FUNCTION GLOBAL CODE
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// Output:0

	// TRIPLANAR FUNCTION VERTEX CODE
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

void fragment() {
// TextureUniformTriplanar:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 n_tex_read = triplanar_texture( TextureUniformTriplanar, triplanar_power_normal, triplanar_pos );
		n_out21p0 = n_tex_read.rgb;
		n_out21p1 = n_tex_read.a;
	}

// TextureUniformTriplanar:20
	vec3 n_out20p0;
	float n_out20p1;
	{
		vec4 n_tex_read = triplanar_texture( TextureUniformTriplanar2, triplanar_power_normal, triplanar_pos );
		n_out20p0 = n_tex_read.rgb;
		n_out20p1 = n_tex_read.a;
	}

// Input:10
	mat4 n_out10p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:11
	vec3 n_out11p0 = (n_out10p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorDecompose:6
	float n_out6p0 = n_out11p0.x;
	float n_out6p1 = n_out11p0.y;
	float n_out6p2 = n_out11p0.z;

// VectorFunc:22
	vec3 n_out22p0 = max(min(vec3(n_out6p1), vec3(1.0)), vec3(0.0));

// VectorMix:7
	vec3 n_out7p0 = mix(n_out21p0, n_out20p0, n_out22p0);

// Output:0
	ALBEDO = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 628, -776 )
nodes/fragment/0/position = Vector2( 2100, -280 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( 500, 40 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( 960, 0 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( 1760, -60 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 500, -40 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 700, 0 )
nodes/fragment/20/node = SubResource( 3 )
nodes/fragment/20/position = Vector2( 880, -360 )
nodes/fragment/21/node = SubResource( 4 )
nodes/fragment/21/position = Vector2( 880, -560 )
nodes/fragment/22/node = SubResource( 5 )
nodes/fragment/22/position = Vector2( 1420, 0 )
nodes/fragment/connections = PoolIntArray( 3, 0, 11, 1, 10, 0, 11, 0, 20, 0, 7, 1, 21, 0, 7, 0, 7, 0, 0, 0, 6, 1, 22, 0, 11, 0, 6, 0, 22, 0, 7, 2 )

[resource]
shader = SubResource( 9 )
shader_param/triplanar_scale = Vector3( 1, 1, 1 )
shader_param/triplanar_offset = null
shader_param/triplanar_sharpness = 0.5
shader_param/TextureUniformTriplanar = ExtResource( 2 )
shader_param/TextureUniformTriplanar2 = ExtResource( 1 )
