[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[ext_resource path="res://seamless-sand-textures.jpeg" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=10]

[sub_resource type="VisualShaderNodeVectorClamp" id=14]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0.8, 0.8, 0.8 ) ]

[sub_resource type="VisualShaderNodeTexture" id=15]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=16]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=5]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeColorConstant" id=6]
constant = Color( 0.927742, 0.8291, 0.493296, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=7]
constant = Color( 0.372252, 0.329232, 0.135963, 1 )

[sub_resource type="VisualShader" id=8]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_16;



void vertex() {
// Output:0

}

void fragment() {
// Texture:16
	vec4 tex_frg_16_read = texture(tex_frg_16, UV.xy);
	vec3 n_out16p0 = tex_frg_16_read.rgb;
	float n_out16p1 = tex_frg_16_read.a;

// Color:8
	vec3 n_out8p0 = vec3(0.927742, 0.829100, 0.493296);
	float n_out8p1 = 1.000000;

// Color:9
	vec3 n_out9p0 = vec3(0.372252, 0.329232, 0.135963);
	float n_out9p1 = 1.000000;

// Input:10
	mat4 n_out10p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:11
	vec3 n_out11p0 = (n_out10p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorDecompose:6
	float n_out6p0 = n_out11p0.x;
	float n_out6p1 = n_out11p0.y;
	float n_out6p2 = n_out11p0.z;

// VectorMix:7
	vec3 n_out7p0 = mix(n_out8p0, n_out9p0, vec3(n_out6p1));

// VectorClamp:15
	vec3 n_in15p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in15p2 = vec3(0.80000, 0.80000, 0.80000);
	vec3 n_out15p0 = clamp(n_out7p0, n_in15p1, n_in15p2);

// ScalarOp:17
	float n_out17p0 = dot(n_out16p0, vec3(0.333333, 0.333333, 0.333333)) * dot(n_out15p0, vec3(0.333333, 0.333333, 0.333333));

// Output:0
	ALBEDO = vec3(n_out17p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 626.774, -229.802 )
nodes/fragment/0/position = Vector2( 2500, -20 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( 280, 280 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( 1120, 280 )
nodes/fragment/7/node = SubResource( 5 )
nodes/fragment/7/position = Vector2( 1740, 60 )
nodes/fragment/8/node = SubResource( 6 )
nodes/fragment/8/position = Vector2( 1200, -80 )
nodes/fragment/9/node = SubResource( 7 )
nodes/fragment/9/position = Vector2( 1200, 100 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( 280, 100 )
nodes/fragment/11/node = SubResource( 10 )
nodes/fragment/11/position = Vector2( 660, 80 )
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( 2080, 140 )
nodes/fragment/16/node = SubResource( 15 )
nodes/fragment/16/position = Vector2( 1620, -420 )
nodes/fragment/17/node = SubResource( 16 )
nodes/fragment/17/position = Vector2( 2120, -320 )
nodes/fragment/connections = PoolIntArray( 8, 0, 7, 0, 3, 0, 11, 1, 10, 0, 11, 0, 11, 0, 6, 0, 9, 0, 7, 1, 7, 0, 15, 0, 6, 1, 7, 2, 15, 0, 17, 1, 16, 0, 17, 0, 17, 0, 0, 0 )

[resource]
shader = SubResource( 8 )
