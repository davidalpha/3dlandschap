[gd_scene load_steps=11 format=2]

[ext_resource path="res://World.gd" type="Script" id=1]
[ext_resource path="res://PlayerCamera.tscn" type="PackedScene" id=2]
[ext_resource path="res://noise_tileable.png" type="Texture" id=3]
[ext_resource path="res://object_capsule.tscn" type="PackedScene" id=4]
[ext_resource path="res://grass.gd" type="Script" id=5]

[sub_resource type="ProceduralSky" id=1]
sky_curve = 0.167946

[sub_resource type="Environment" id=2]
background_mode = 3
background_sky = SubResource( 1 )
background_color = Color( 1, 0.768627, 0.521569, 0.321569 )
background_energy = 0.0
ambient_light_color = Color( 0.980392, 0.933333, 1, 1 )
ambient_light_energy = 0.8
ambient_light_sky_contribution = 0.5
fog_enabled = true
fog_color = Color( 0.968627, 0.729412, 0.270588, 0.345098 )
fog_sun_color = Color( 1, 1, 1, 1 )
auto_exposure_scale = 0.6
ss_reflections_enabled = true
ssao_enabled = true
ssao_radius2 = 1.0
dof_blur_far_distance = 130.0
adjustment_saturation = 1.36

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
//render_mode diffuse_toon;

// direction.x, direction.y, steepness, wavelength
uniform vec4 wave_1 = vec4(0.14, 0.29, 0.25, 18.93);
uniform vec4 wave_2 = vec4(0.3, 0.35, 0.28, 12.0);
uniform vec4 wave_3 = vec4(0.8, 3.18, 0.22, 9.0);
uniform vec4 wave_4 = vec4(0.2, 0.6, 0.36, 24.0);

uniform float noise_zoom = 0.22;
uniform float noise_amp = 9.59;

uniform vec4 color: hint_color = vec4(0.3411, 0.5333, 0.6627, 1.0);
uniform float time_factor = 1.5;
uniform float color_mid_height = 3.0;
uniform float foam_level = 5.64;
uniform sampler2D foam_texture;
uniform float foam_scale = 114.32;
uniform float foam_height = 6.61;
//uniform float refraction = 0.05;
uniform float metallic = 0.59;
uniform float roughness = 0;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform float normal_zoom = 1.0;
uniform float normal_flow_divisor = 350.0;

uniform float PI = 3.14159;

float hash(vec2 p) {
  return fract(sin(dot(p * 17.17, vec2(14.91, 67.31))) * 4791.9511);
}

float noise(vec2 x) {
  vec2 p = floor(x);
  vec2 f = fract(x);
  f = f * f * (3.0 - 2.0 * f);
  vec2 a = vec2(1.0, 0.0);
  return mix(mix(hash(p + a.yy), hash(p + a.xy), f.x),
         mix(hash(p + a.yx), hash(p + a.xx), f.x), f.y);
}

float fbm(vec2 x) {
  float height = 0.0;
  float amplitude = 0.5;
  float frequency = 3.0;
  for (int i = 0; i < 6; i++){
    height += noise(x * frequency) * amplitude;
    amplitude *= 0.5;
    frequency *= 2.0;
  }
  return height;
}

vec3 gernster_wave(vec4 params, vec2 pos, float time) {
	float steepness = params.z;
	float wavelength = params.w;
	float k = 2.0 * PI / wavelength;
	float c = sqrt(9.81 / k);
	vec2 d = normalize(params.xy);
	float f = k * (dot(d, pos.xy) - c * time);
	float a = steepness / k;
	return vec3(d.x * (a * cos(f)), a * sin(f), d.y * (a * cos(f)));
}

vec3 wave(vec2 pos, float time) {
	vec3 to_return = vec3(0.0);
	to_return += gernster_wave(wave_1, pos, time);
	to_return += gernster_wave(wave_2, pos, time);
	to_return += gernster_wave(wave_3, pos, time);
	to_return += gernster_wave(wave_4, pos, time);
	to_return.y += fbm(pos.xy * (noise_zoom/10.0)) * noise_amp;
	return to_return;
}

varying float height;

void vertex() {
	float time = TIME / time_factor;
	vec3 wave_result = wave(VERTEX.xz, time);
	VERTEX.y += wave_result.y;
	height = wave_result.y;
	VERTEX.x += wave_result.x;
	VERTEX.z += wave_result.z;
	TANGENT = normalize(vec3(0.0, wave(VERTEX.xz + vec2(0.0, 0.2), time).y - wave(VERTEX.xz + vec2(0.0, -0.2), time).y, 0.4));
	BINORMAL = normalize(vec3(0.4, wave(VERTEX.xz + vec2(0.2, 0.0), time).y - wave(VERTEX.xz + vec2(-0.2, 0.0), time ).y, 0.0));
	NORMAL = cross(TANGENT, BINORMAL);
}

void fragment() {
	// calculate depth for foam
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
	depth = depth * 2.0 - 1.0;
	depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]);
	depth = depth + VERTEX.z;
	// calculate foam mask stuff
	float foam_scroll = TIME/4.0;
	vec2 scaled_uv = UV * foam_scale; 
	float channelA = texture(foam_texture, scaled_uv - vec2(foam_scroll, cos(UV.x))).r; 
	float channelB = texture(foam_texture, scaled_uv * 0.5 + vec2(sin(UV.y), foam_scroll)).b;
	float mask = (channelA + channelB) * 0.95;
	mask = pow(mask, 2);
	mask = clamp(mask, 0, 1);
	ALBEDO = color.rgb * ((height + color_mid_height) / 5.0);
	if(height > foam_height) {
		EMISSION = vec3(1.0 - mask) * pow(height - foam_height, 1.0);
	}
	if(depth < foam_level) {
		EMISSION = vec3(1.0 - mask) * pow((foam_level - depth)/foam_level, 2.0);
	}
	ALPHA = color.a;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	NORMALMAP = texture(texture_normal,(UV + TIME/normal_flow_divisor)*normal_zoom).rgb;
	NORMALMAP_DEPTH = normal_scale;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/wave_1 = Plane( 1, 0.29, 0.01, 1 )
shader_param/wave_2 = Plane( 1, 0.35, 0.28, 2 )
shader_param/wave_3 = Plane( 1, 0.1, 0.05, 3 )
shader_param/wave_4 = Plane( 1, 0.1, 0.3, 4 )
shader_param/noise_zoom = 1.0
shader_param/noise_amp = 0.1
shader_param/color = Color( 0.3411, 0.5333, 0.6627, 1 )
shader_param/time_factor = 6.0
shader_param/color_mid_height = 6.0
shader_param/foam_level = 2.0
shader_param/foam_scale = 250.0
shader_param/foam_height = 4.0
shader_param/metallic = 0.1
shader_param/roughness = 0.59
shader_param/normal_scale = 1.0
shader_param/normal_zoom = 2.0
shader_param/normal_flow_divisor = 350.0
shader_param/PI = 3.14159
shader_param/foam_texture = ExtResource( 3 )

[sub_resource type="PlaneMesh" id=5]
material = SubResource( 4 )
size = Vector2( 400, 400 )
subdivide_width = 400
subdivide_depth = 400

[node name="World" type="Spatial"]
script = ExtResource( 1 )
noise_period = 40
noise_seed = 24091985
subdivide = 100

[node name="Spatial" type="Spatial" parent="."]
script = ExtResource( 5 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 2 )

[node name="Camera" parent="." instance=ExtResource( 2 )]

[node name="capsule" parent="." instance=ExtResource( 4 )]

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.962337, -0.27186, 0, 0.27186, 0.962337, 0, 69.8267, 0 )
visible = false

[node name="OmniLight2" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 51.6869, 0 )
visible = false
light_bake_mode = 2
shadow_enabled = true
omni_range = 100.0

[node name="sea" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 0.5, 0, 0, 0, 1, 0, -1, 0 )
cast_shadow = 0
mesh = SubResource( 5 )
material/0 = null
